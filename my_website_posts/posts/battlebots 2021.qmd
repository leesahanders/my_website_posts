---
title: "BATTLEBOTS 2021"
description: "It's robot fighting time!"
author: "Lisa"
date: "2021-01-04"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
editor: source
freeze: true
categories:
  - datascience
image: "img/bb/BB.jpg"
---

## What is Battlebots?

BattleBots is a robotic combat TV show. It is an amazing community and clearly a hobby of love by the people that join the show. Robots weigh 250lbs, 500 lbs in special circumstances, and there are strict rules around what is and isn't allowed for weapons. The show spends time both on the 3 minute match and behind the scenes with interviews with the builders, footage of repairs, and last minute modifications as teams compete for the ultimate trophy.

### About Battlebots

-   [Official BattleBots page](https://battlebots.com/)
-   [Reddit Battlebots](http://reddit.com/r/battlebots)
-   [Season 5 Rumor Mill at Reddit/r/Battlebots](https://www.reddit.com/r/battlebots/comments/grst5y/the_battlebots_season_5_rumor_mill/)
-   [Combat Robot Resource Guide by Robert Cowan](https://docs.google.com/document/d/1tXSzwzEM2jNGjZ2KYn00ldeHvEru0y3_zlNkVw-F9iI/edit#heading=h.1wa7o4efnhdl)

### Best Fight Videos

All rights are owned by Battlebots on ABC

::: panel-tabset
#### Minotaur vs. Bombshell

<iframe width="560" height="315" src="https://www.youtube.com/embed/89LYj3d1jCw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### Yeti vs. Lock Jaw

<iframe width="560" height="315" src="https://www.youtube.com/embed/AqM8zxjfV1M" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### Tombstone vs. Bronco

<iframe width="560" height="315" src="https://www.youtube.com/embed/X2vSMMXmGdg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### Hypershock + Rake

<iframe width="560" height="315" src="https://www.youtube.com/embed/UNk5-3fGNqI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### Death Roll vs. End Game

<iframe width="560" height="315" src="https://www.youtube.com/embed/RrA1XCtUs8I" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### HUGE vs. Bronco

<iframe width="560" height="315" src="https://www.youtube.com/embed/jJRskcggTnI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>

#### Witch Doctor Vs. actual household items

<iframe width="560" height="315" src="https://www.youtube.com/embed/DZLs52pRQis" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>
:::

## Battlebots Analysis

Below is my attempt at diving deep into the world of Battlebots to understand what makes some bots more successful than others. All data is from the Battlebots official website, scraped from the web using the Rvest R package developed by Hadley Wickam.

### Messy web scraping to get data

```{r, message=FALSE, warning=FALSE}
library(rvest)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(data.table)
library(stringr)
#devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
library(RColorBrewer)
library(ggmap)
library(maps)
library(ggrepel)
library(sf)
library("rnaturalearth")
library("rnaturalearthdata")
library(htmlwidgets)
library(webshot)
library(tidygeocoder)
library(rgeos)


# Set URL list
#urls = c("https://battlebots.com/robot/yeti-2019/")
#url <- "https://battlebots.com/robot/yeti-2019/"

# Check if data already exists, if not download it
if(file.exists("./files/battlebotsinfo.csv")){
  message("Loading saved files")
  
  battlebotsinfo = read.csv("./files/battlebotsinfo.csv", stringsAsFactors=FALSE)
  battlebotsmatch = read.csv("./files/battlebotsmatch.csv", stringsAsFactors=FALSE)
  battlebotsstat = read.csv("./files/battlebotsstat.csv", stringsAsFactors=FALSE)
  
} else {
  message("Generating battlebots data files")
  
  urls = read.csv("./files/battlebotsurls.csv", stringsAsFactors=FALSE)
  
  for( i in 1:nrow(urls) ){
    url = urls[i,1]
    
    print(paste0("Reading ", i, " of ", nrow(urls), ": ", url))
    
    # Read info and arrange into table 
    # (note that this isn't actually a table in the html source so we had to jump through some hoops to make that happen)
    info <- read_html(url) %>%
      html_nodes(".info-grid") %>%
      html_text()
    
    info_df_tmp <- map(info, function(x) {
      tibble(text = unlist(str_split(x, pattern = "\\n"))) %>%
        rowid_to_column(var = "line")
    })
    
    info_df <- bind_rows(info_df_tmp, .id = "page") 
    
    # Trim off leading whitespace
    info_trim <- slice(info_df, which.max(text == "Robot:") : n()) %>%
      select(text)
    
    # Split into multiple rows , remediate any cases where Values are part of the Record
    info_split <- info_trim %>%
      mutate(text = str_trim(text)) %>% 
      mutate(Record = ifelse(grepl(":", text, fixed = TRUE), text, NA)) %>%
      separate(Record, into = c("Record", "Value"), sep = ":", remove = FALSE) %>%
      fill(Record) %>%
      mutate(Value = ifelse(is.na(Value), 
               ifelse(grepl(":", text, fixed = TRUE), NA, text), Value )) %>%
      select(Record, Value) %>%
      filter(!is.na(Value)) %>%
      filter(!grepl("^\\s*$", Value)) %>%
      unique() %>%
      group_by(Record) %>%
      summarize(Value = paste0(Value, collapse = ", ")) %>%
      ungroup() %>%
      pivot_wider(names_from = Record, values_from = Value) %>%
      mutate_all(as.character)
    
    # Robot name 
    robot = info_split$Robot
    
    # Read both history tables and wrangle into table form
    history <- read_html(url) %>%
      html_nodes(".igsv-table") 
    
    if(length(history) > 0){
    stat_history <- history[1] %>% html_table(header = TRUE, fill = TRUE)
    stat_history_df <- stat_history[[1]] %>%
      mutate(Robot = robot) %>%
      mutate_all(as.character)
    }
    
    if(length(history) > 1){
      match_history <- history[2] %>% html_table(header = TRUE, fill = TRUE)
      match_history_df <- match_history[[1]] %>%
        mutate(Robot = robot) %>%
        mutate_all(as.character)
    }
    
    # Compile
    if(i==1){
      battlebotsinfo = info_split
      battlebotsmatch = match_history_df
      battlebotsstat = stat_history_df
    } else {
      battlebotsinfo = bind_rows(battlebotsinfo, info_split)
      
      if(length(history) > 0){
        battlebotsstat = bind_rows(battlebotsstat, stat_history_df)
      }
      
      if(length(history) > 1){
        battlebotsmatch = bind_rows(battlebotsmatch, match_history_df)
      }
      
    }
    
  } # End for loop 
  
  # Save files to make it easier next time
  write.csv(battlebotsinfo, "./files/battlebotsinfo.csv")
  write.csv(battlebotsmatch, "./files/battlebotsmatch.csv")
  write.csv(battlebotsstat, "./files/battlebotsstat.csv")

}


# References:
# https://community.rstudio.com/t/convert-character-string-into-table/9158
# https://stackoverflow.com/questions/42419765/convert-one-column-into-a-new-column-every-5-rows-a-numeric-interval
#  - [Scraping in R rvest](https://www.dataquest.io/blog/web-scraping-in-r-rvest/)
#  - [Tidy Web Scraping in R Tutorial and Resources](https://towardsdatascience.com/tidy-web-scraping-in-r-tutorial-and-resources-ac9f72b4fe47)

```

```{r}

### Frequency of Battlebots Weapon Types

# type_frequency <- battlebotsinfo %>%
#   group_by(Type) %>%
#   summarize(freq = n()) %>%
#   rename("word" = "Type")
#   
# my_wordcloud1 <- wordcloud2(data=type_frequency, size = 0.5, shape = 'pentagon', color='random-dark')
# 
# my_wordcloud1

#saveWidget(my_wordcloud, "tmp.html", selfcontained = F)
#webshot("tmp.html", "./images/wc1.png", delay = 5)

#wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")

# https://towardsdatascience.com/create-a-word-cloud-with-r-bde3e7422e8a
# https://cran.r-project.org/web/packages/wordcloud2/vignettes/wordcloud.html#lettercloud-function
```

### Frequency of Builder Day Jobs

```{r}

job_frequency <- battlebotsinfo %>%
  group_by(Job) %>%
  summarize(freq = n()) %>%
  rename("word" = "Job")

job_frequency$word <- iconv(job_frequency$word, to = "UTF-8")

my_wordcloud2 <- wordcloud2(data=job_frequency, size = 0.25, color='random-dark')

my_wordcloud2
```

### Map of Builder Locations

```{r, message=FALSE, warning=FALSE}

#Load location data
if(file.exists("./files/battlebotslocation.csv")){
  message("Loading saved files")
  
  bbmap = read.csv("./files/battlebotslocation.csv", stringsAsFactors=FALSE)
} else {
  message("Generating battlebots location files")
  
  #Set up the API key for google 
  #This now costs money
  #Go to: https://cloud.google.com/maps-platform/
  #register_google(key = "", write = TRUE)
  
  bbmap <- battlebotsinfo %>%
    select(Robot, Hometown) %>%
    mutate(Team = paste("Team", Robot, ", from", Hometown)) %>%
    mutate_geocode(Hometown)
  
  write.csv(bbmap, "./files/battlebotslocation.csv")
}
  
world <- ne_countries(scale = "medium", returnclass = "sf")

p <- ggplot(data = world) + 
  geom_sf(color = "black", fill = "lightgray") +
  xlab("Longitude") + ylab("Latitude") +
  geom_point( data=bbmap, aes(x=lon, y=lat, text=Team), color="red", size=1) +
  # ggrepel::geom_label_repel(data = bbmap,
  #            aes(x = lon, y = lat, label = Robot),
  #            size = 1.5, alpha = 0.8,
  #            label.r = unit(0.5, "lines"), label.size = 0.25,
  #            segment.color = "red", segment.size = 1,
  #            seed = 1002) +
  #geom_text_repel(data=bbmap,aes(x = lon, y = lat, label = Robot),box.padding = 0.4,point.padding = 0.25,size=4,show.legend=FALSE)+
  ggtitle("Battlebots Hometowns World map", subtitle = paste0("(", length(unique(bbmap$Robot)), " teams)"))

#pp <- ggplotly(p, tooltip="text")

#assign("pp", plotly::ggplotly(p, tooltip="text"), envir=parent.frame())

#pp

p

#htmlwidgets::saveWidget( plotly::ggplotly(p, tooltip="text"), "tmp3.html")

#print( htmltools::tags$iframe(src="temp.html", width=640, height=480) )

# <iframe src="temp.html" width='1000px' height='800px'></iframe> 

  
#https://stackoverflow.com/questions/29037851/how-do-i-plot-us-cities-using-ggplot
#https://stackoverflow.com/questions/22752009/plot-on-ggmap-by-using-city-and-state
#https://towardsdatascience.com/plotting-spatial-data-in-r-a38a405a07f1
#https://cran.r-project.org/web/packages/usmap/vignettes/advanced-mapping.html 
#https://www.r-graph-gallery.com/330-bubble-map-with-ggplot2.html
#https://ggplot2-book.org/maps.html
#http://yluo86.github.io/rmaps
#https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html
#https://www.statsandr.com/blog/world-map-of-visited-countries-in-r/
#https://cran.r-project.org/web/packages/tidygeocoder/vignettes/tidygeocoder.html
#https://towardsdatascience.com/reverse-geocoding-in-r-f7fe4b908355
#https://stackoverflow.com/questions/13905098/how-to-get-the-longitude-and-latitude-coordinates-from-a-city-name-and-country-i
#https://stackoverflow.com/questions/59144842/why-does-ggplotly-does-not-work-in-rmarkdown-the-same-way-ggplot-does
```

<br>

### Win Frequency by Robot Type

```{r, message=FALSE, warning=FALSE}
#TODO: Add plot showing frequency of type of robot 

# type_frequency <- battlebotsinfo %>%
#   group_by(Type) %>%
#   summarize(freq = n()) %>%
#   rename("word" = "Type")

win_frequency_raw <- merge(battlebotsinfo, battlebotsstat, by="Robot") %>%
  select(Stats, Career, Robot, Type) %>%
  filter(Stats %in% c("Total matches", "Total wins")) %>%
  #mutate(Career = as.numeric(Stats)) %>%
  pivot_wider(names_from = Stats, values_from = Career) %>%
  unnest(`Total wins`) %>%
  mutate(`Total wins` = as.numeric(`Total wins`),
         `Total matches` = as.numeric(`Total matches`))

type_wins <- win_frequency_raw %>%
  group_by(Type) %>%
  summarize(wins = sum(`Total wins`) / sum(`Total matches`))

robot_wins <- win_frequency_raw %>%
  group_by(Type) %>%
  mutate(CountType = n()) %>%
  ungroup() %>%
  group_by(Robot, Type, CountType) %>%
  summarize(wins = sum(`Total wins`) / sum(`Total matches`)) %>%
  filter(CountType > 1) %>%
  arrange(wins)



p <- ggplot(robot_wins, aes(x=Type, y=wins)) + geom_boxplot() + theme(axis.text.x = element_text(angle = -90, hjust = 1))


p <- ggplot(robot_wins, aes(x=reorder(Type, -wins, na.rm = TRUE), y=wins)) + geom_boxplot() + theme(axis.text.x = element_text(angle = -90, hjust = 1)) +  labs(y="Wins", x="Type")
p

```

## Resources

Battlebots:

-   [Official BattleBots page](https://battlebots.com/)
-   [Reddit Battlebots](http://reddit.com/r/battlebots)
-   [Season 5 Rumor Mill at Reddit/r/Battlebots](https://www.reddit.com/r/battlebots/comments/grst5y/the_battlebots_season_5_rumor_mill/)
-   [Combat Robot Resource Guide by Robert Cowan](https://docs.google.com/document/d/1tXSzwzEM2jNGjZ2KYn00ldeHvEru0y3_zlNkVw-F9iI/edit#heading=h.1wa7o4efnhdl)

Resources for building a similar RMarkdown page:

-   [Creating dynamic tabs in Rmarkdown](https://stackoverflow.com/questions/42631642/creating-dynamic-tabs-in-rmarkdown)
-   [HTML Special Features: KU CRMDA Markdown](https://cran.r-project.org/web/packages/stationery/vignettes/HTML_special_features.html)
-   https://github.com/rstudio/rmarkdown/issues/1681
-   [R: 2 column layout in Rmarkdown with tabset](https://stackoverflow.com/questions/58837184/r-2-column-layout-in-rmarkdown-with-tabset)
-   [Scraping in R rvest](https://www.dataquest.io/blog/web-scraping-in-r-rvest/)
-   [Tidy Web Scraping in R Tutorial and Resources](https://towardsdatascience.com/tidy-web-scraping-in-r-tutorial-and-resources-ac9f72b4fe47)
